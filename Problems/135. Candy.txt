-- Problem Name: "135. Candy" (https://leetcode.com/problems/candy/)
-- Difficulty: Hard
-- Language: C++
-- Problem statement (condensed):
Given an array of "ratings" of children, you need to return an array of integers back which counts the amount of candy
the 'ith' child gets. The candy is distributed according to these rules:

    -Each child must have at least one candy.
    -Children with a higher rating get more candies than their neighbors.


-- Logic/Explanation: 
This question is quite simple once you understand the fact that the operation described in the problem is directional.
So, we can simply do the operation of FINISH THIS SIAOIOIASJDOIASJDOIJDOIQWJDOIJDOIQJWDO

Things to note: 
My approach is a bit inefficient. You can skip the second step and go straight to the third by simply making and filling the 
group for a corresponding group size at the same time.

-- Time complexity: O(n) time, O(n) space
-- Code:
class Solution {
public:
    int minDeletions(string s) {
        int occ[26] = {0};
        for (auto i: s)
            occ[i-'a']++;
        
        unordered_map<int,int> mp;
        for (int i = 0; i < 26; i++)
            mp[occ[i]]++;
        
        int res = 0, f = 1;
        while (f) {
            f = 0;
            for (auto count: mp) {
                if (count.second == 0 || count.first == 0)
                    continue;
                    
                if (count.second > 1) {
                    f = 1;
                    int temp = count.second - 1;
                    mp[count.first] -= temp;
                    mp[count.first-1] += temp;
                    res += temp;
                }
            }
        }
        return res;
    }
};

-- Runtime: 37ms	
-- Memory Usage: 17.3MB	