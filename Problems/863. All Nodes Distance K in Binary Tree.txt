-- Problem Name: "863. All Nodes Distance K in Binary Tree" (https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/)
-- Difficulty: Medium
-- Language: C++
-- Problem statement (condensed):
Given a binary tree, find all the nodes that are a distance of "k" from a specified target node.


-- Logic/Explanation: 
In this question, we are required to traverse to the left, to the right and to the parent of a node. This is a kind
of modified bfs over the tree, as we generally cannot traverse to the parent of a tree. So we need to:
- Make a link between nodes and parents
- Run the modified bfs for "k" distance

We can make the link between the nodes and the parents by using a hashmap (though I believe using the bin tree array
notation can be more memory efficient), and the modified bfs is quite simple as shown in the code below.

Things to note: 
Unlike the standard bfs we run over a binary tree, the bfs we use here is more akin to the bfs of a graph. So we will
need to mark the nodes that we have already visited to not have repeated nodes and infinite loops.

-- Code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	//This is the modified bfs
    void bfs(queue<TreeNode*> &q, unordered_map<TreeNode*, TreeNode*> mp, unordered_map<int,bool> &seen, int tdepth) {
        // For a zero indexed bin tree array, odd = left, even = right (0 is root)
        int depth = 0;
        while (depth < tdepth) {
            int n = q.size();
            // Check left, right, and up. 
            for (int i = 0; i < n; i++) {
                auto curr = q.front();
                q.pop();
                seen[curr->val] = true;		// using a umap to mark seen nodes
                
                auto parent = mp[curr], left = curr->left, right = curr->right;
                
                if (parent && !seen[parent->val])	// The "modified" part of the modified bfs
                    q.push(parent);
                
                if (left && !seen[left->val])
                    q.push(left);
                
                if (right && !seen[right->val])
                    q.push(right);
            }
            depth++;	// To stop at the correct distance "k". The variable is kind of a misnomer, mb
        }
        return;
    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        //Skew trees break the array conversion logic, so gotta do umap :(
        unordered_map<TreeNode*, TreeNode*> mp;
        queue<TreeNode *> q;
        mp[root] = nullptr;
        q.push(root);

	// marking the parents of each node
        while (q.size()) {
            int n = q.size();
            for (int i = 0; i < n; i++) { 
                auto curr = q.front();
                q.pop();
                
                if (!curr)
                    continue;
                
                if (curr->left) {
                    q.push(curr->left);
                    mp[curr->left] = curr;
                }
                
                if (curr->right) {
                    q.push(curr->right);    
                    mp[curr->right] = curr;
                }
            }
        }
        
        unordered_map<int,bool> seen;
        q.push(target);
        bfs(q, mp, seen, k);
        
        vector<int> res;
        while (q.size()) {
            res.push_back(q.front()->val);
            q.pop();
        }
        
        return res;
    }
};


-- Runtime: 3ms
-- Memory Usage: 13.4MB